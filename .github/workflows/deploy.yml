name: Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      bootstrap:
        description: "Run CDK bootstrap (first-time setup)"
        required: false
        default: "false"

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-central-1

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Create web .env (hardcoded)
        run: |
          echo "VITE_API_URL=https://api.the-libs.com" > web/.env
          echo "VITE_COGNITO_USER_POOL_ID=eu-central-1_kMZhsbha1" >> web/.env
          echo "VITE_COGNITO_CLIENT_ID=5c2u06iqo1cfeh4t0f6d9d8cg6" >> web/.env
          echo "VITE_COGNITO_DOMAIN=tem.auth.eu-central-1.amazoncognito.com" >> web/.env

      - name: Build API
        run: pnpm --filter il-pfm-api build

      - name: Build Web
        run: pnpm --filter il-pfm-web build

      - name: Configure AWS credentials (OIDC)
        env:
          AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        if: ${{ env.AWS_ROLE_TO_ASSUME != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Configure AWS credentials (Access Keys)
        env:
          AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        if: ${{ env.AWS_ROLE_TO_ASSUME == '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Export aggregator secrets to env
        env:
          SALTEDGE_ID: ${{ secrets.SALTEDGE_ID }}
          SALTEDGE_KEY: ${{ secrets.SALTEDGE_KEY }}
          SALTEDGE_WEBHOOK_USER: ${{ secrets.SALTEDGE_WEBHOOK_USER }}
          SALTEDGE_WEBHOOK_PASS: ${{ secrets.SALTEDGE_WEBHOOK_PASS }}
        run: |
          echo "SALTEDGE_ID=$SALTEDGE_ID" >> $GITHUB_ENV
          echo "SALTEDGE_KEY=$SALTEDGE_KEY" >> $GITHUB_ENV
          echo "SALTEDGE_WEBHOOK_USER=$SALTEDGE_WEBHOOK_USER" >> $GITHUB_ENV
          echo "SALTEDGE_WEBHOOK_PASS=$SALTEDGE_WEBHOOK_PASS" >> $GITHUB_ENV

      - name: Check CDK bootstrap stack
        id: check_bootstrap
        continue-on-error: true
        run: aws cloudformation describe-stacks --stack-name CDKToolkit --region $AWS_REGION

      - name: CDK Bootstrap (auto if not bootstrapped)
        if: ${{ steps.check_bootstrap.outcome == 'failure' || github.event.inputs.bootstrap == 'true' }}
        run: pnpm --filter il-pfm-infra cdk:bootstrap

      - name: CDK Synth
        run: pnpm --filter il-pfm-infra synth

      - name: CDK Deploy
        run: pnpm --filter il-pfm-infra cdk:deploy
